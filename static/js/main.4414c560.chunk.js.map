{"version":3,"sources":["types/ErrorType.ts","components/PostCell.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/Comment.tsx","components/PostDetails.tsx","components/UserLink.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorType","PostCell","React","memo","_ref","post","isPostSelected","setSelectedPost","_jsxs","children","_jsx","id","title","className","type","onClick","PostsList","posts","selectedPost","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","setComments","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","errors","setErrors","_useState5","_useState6","name","setName","_useState7","_useState8","email","setEmail","_useState9","_useState10","text","setText","addComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCommentData","newComment","wrap","_context","prev","next","abrupt","postId","_objectSpread","sent","prevState","concat","_toConsumableArray","finish","stop","apply","handleInputOnChange","event","target","value","filter","error","NAME","EMAIL","TEXT","onSubmit","preventDefault","noErrorsPresent","trim","validateForm","htmlFor","placeholder","classNames","includes","onChange","Comment","comment","handleRemoveComment","comm","href","PostDetails","commments","setError","isFormOpen","setIsFormOpen","useEffect","loadComments","loadedComments","t0","commentsBlock","_Fragment","noCommentsBlock","UserLink","user","selectedUser","getSelectedUser","setIsMenuOpen","UserSelector","users","isMenuOpen","role","App","setUsers","setPosts","setSelectedUser","_useState11","_useState12","loadUsers","loadedUsers","loadPosts","_callee2","selectedUserPosts","_context2","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4414c560.chunk.js","sourcesContent":["export enum ErrorType {\n  NAME = 'Name is required',\n  EMAIL = 'Email is required',\n  TEXT = 'Enter some text',\n}\n","import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  isPostSelected: boolean;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostCell: React.FC<Props> = React.memo(({\n  post,\n  isPostSelected,\n  setSelectedPost,\n}) => {\n  const handleOpenPost = () => {\n    setSelectedPost(post);\n  };\n\n  const handleClosePost = () => {\n    setSelectedPost(null);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        {isPostSelected\n          ? (\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className=\"button is-link is-light\"\n              onClick={handleClosePost}\n            >\n              Close\n            </button>\n          )\n          : (\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className=\"button is-link is-light\"\n              onClick={handleOpenPost}\n            >\n              Open\n            </button>\n          )}\n      </td>\n    </tr>\n  );\n});\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostCell } from './PostCell';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <th />\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostCell\n              key={post.id}\n              post={post}\n              setSelectedPost={setSelectedPost}\n              isPostSelected={selectedPost?.id === post.id}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../types/ErrorType';\nimport { createComment } from '../api/comments';\nimport { CommentType } from '../types/CommentType';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null;\n  setComments: React.Dispatch<React.SetStateAction<CommentType[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<ErrorType[]>([]);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n\n  const validateForm = () => {\n    let noErrorsPresent = true;\n\n    if (!name.trim()) {\n      setErrors(prevState => [...prevState, ErrorType.NAME]);\n      noErrorsPresent = false;\n    }\n\n    if (!email.trim()) {\n      setErrors(prevState => [...prevState, ErrorType.EMAIL]);\n      noErrorsPresent = false;\n    }\n\n    if (!text.trim()) {\n      setErrors(prevState => [...prevState, ErrorType.TEXT]);\n      noErrorsPresent = false;\n    }\n\n    return noErrorsPresent;\n  };\n\n  const addComment = async () => {\n    if (!selectedPost) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const newCommentData = {\n        postId: selectedPost.id,\n        name,\n        email,\n        body: text,\n      };\n\n      const newComment = await createComment(newCommentData);\n\n      setComments(prevState => {\n        return [\n          ...prevState, newComment,\n        ];\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputOnChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        setErrors(prevState => prevState.filter(\n          error => error !== ErrorType.NAME,\n        ));\n        break;\n      case 'email':\n        setEmail(event.target.value);\n        setErrors(prevState => prevState.filter(\n          error => error !== ErrorType.EMAIL,\n        ));\n        break;\n      case 'body':\n        setText(event.target.value);\n        setErrors(prevState => prevState.filter(\n          error => error !== ErrorType.TEXT,\n        ));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleClearButton = () => {\n    setText('');\n    setName('');\n    setEmail('');\n    setErrors([]);\n  };\n\n  const handleOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n\n    addComment();\n    setText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleOnSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': errors.includes(ErrorType.NAME),\n            })}\n            value={name}\n            onChange={handleInputOnChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.includes(ErrorType.NAME) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.includes(ErrorType.NAME) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorType.NAME}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': errors.includes(ErrorType.EMAIL),\n            })}\n            value={email}\n            onChange={handleInputOnChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.includes(ErrorType.EMAIL) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.includes(ErrorType.EMAIL) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorType.EMAIL}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': errors.includes(ErrorType.TEXT),\n            })}\n            value={text}\n            onChange={handleInputOnChange}\n          />\n        </div>\n\n        {errors.includes(ErrorType.TEXT) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorType.TEXT}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClearButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { CommentData, CommentType } from '../types/CommentType';\n\nexport const getComments = (postId: number) => {\n  return client.get<CommentType[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: CommentData) => {\n  return client.post<CommentType>('/comments/', { ...data });\n};\n","import React, { FC } from 'react';\nimport { CommentType } from '../types/CommentType';\nimport { deleteComment } from '../api/comments';\n\ntype Props = {\n  comment: CommentType;\n  setComments: React.Dispatch<React.SetStateAction<CommentType[]>>;\n};\n\nexport const Comment: FC<Props> = ({ comment, setComments }) => {\n  const {\n    name,\n    email,\n    body,\n    id,\n  } = comment;\n\n  const handleRemoveComment = async () => {\n    setComments(prevState => prevState.filter(\n      comm => comm.id !== id,\n    ));\n    deleteComment(id);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={handleRemoveComment}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from './Comment';\nimport { Post } from '../types/Post';\nimport { getComments } from '../api/comments';\nimport { CommentType } from '../types/CommentType';\n\ntype Props = {\n  selectedPost: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPost }) => {\n  const [commments, setComments] = useState<CommentType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const handleFormOpen = () => setIsFormOpen(true);\n\n  useEffect(() => {\n    const loadComments = async () => {\n      try {\n        setIsLoading(true);\n        if (!selectedPost) {\n          return;\n        }\n\n        const loadedComments = await getComments(selectedPost?.id);\n\n        setComments(loadedComments);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadComments();\n    setIsFormOpen(false);\n  }, [selectedPost]);\n\n  const commentsBlock = (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {commments.map(comment => (\n        <Comment\n          key={comment.id}\n          comment={comment}\n          setComments={setComments}\n        />\n      ))}\n    </>\n  );\n\n  const noCommentsBlock = (\n    !error && (\n      <p\n        className=\"title is-4\"\n        data-cy=\"NoCommentsMessage\"\n      >\n        No comments yet\n      </p>\n    )\n  );\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        {isLoading\n          ? <Loader />\n          : (\n            <>\n              <div className=\"block\">\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n\n                {\n                  commments.length\n                    ? commentsBlock\n                    : noCommentsBlock\n                }\n\n                {!isFormOpen && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={handleFormOpen}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </div>\n              {isFormOpen && (\n                <NewCommentForm\n                  selectedPost={selectedPost}\n                  setComments={setComments}\n                />\n              )}\n            </>\n          )}\n      </div>\n    </div>\n  );\n});\n","import { Dispatch, FC, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User;\n  selectedUser: User | null;\n  getSelectedUser: (user: User) => void;\n  setIsMenuOpen: Dispatch<SetStateAction<boolean>>\n};\n\nexport const UserLink: FC<Props> = ({\n  user,\n  selectedUser,\n  getSelectedUser,\n  setIsMenuOpen,\n}) => {\n  const handleOnClickUser = () => {\n    getSelectedUser(user);\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <a\n      href={`#user-${user.id}`}\n      className={\n        classNames('dropdown-item', {\n          'is-active': selectedUser?.id === user.id,\n        })\n      }\n      onClick={handleOnClickUser}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\nimport { UserLink } from './UserLink';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  getSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  getSelectedUser,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const handleMenuToggle = () => setIsMenuOpen(prev => !prev);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleMenuToggle}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {isMenuOpen && (\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <UserLink\n                key={user.id}\n                user={user}\n                selectedUser={selectedUser}\n                getSelectedUser={getSelectedUser}\n                setIsMenuOpen={setIsMenuOpen}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getSelectedUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    };\n\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      if (!selectedUser) {\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const selectedUserPosts = await getPosts(selectedUser?.id);\n\n        setPosts(selectedUserPosts);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    setSelectedPost(null);\n    loadPosts();\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  getSelectedUser={getSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser\n                  ? (\n                    <>\n                      {isLoading && <Loader />}\n\n                      {error && (\n                        <div\n                          className=\"notification is-danger\"\n                          data-cy=\"PostsLoadingError\"\n                        >\n                          Something went wrong!\n                        </div>\n                      )}\n\n                      {posts.length\n                        ? (\n                          <PostsList\n                            posts={posts}\n                            selectedPost={selectedPost}\n                            setSelectedPost={setSelectedPost}\n                          />\n                        )\n                        : (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )}\n                    </>\n                  )\n                  : (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': !!selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails selectedPost={selectedPost} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}